#!/usr/bin/env bash

# @describe Interact with the LinkedIn Data API
# @option -k --key <key> "Your RapidAPI Key for LinkedIn API (or set RAPIDAPI_KEY)"
# Host is hardcoded to linkedin-api8.p.rapidapi.com
# @flag   -j --json "Output raw JSON (skip jq pretty-printing)"
# @meta require-tools curl,jq

# @cmd Interact with LinkedIn profiles
profile() {
  :
}

# @cmd Get basic profile data
# @arg username! "LinkedIn profile username (e.g., satyanadella)"
profile::get() {
  local endpoint="/?username=${argc_username}"
  make_request "GET" "$endpoint"
}

# @cmd profile connections Get profile connection count
# @arg username! "LinkedIn profile username (e.g., adamselipsky)"
profile::connections() {
  local endpoint="/connection-count?username=${argc_username}"
  make_request "GET" "$endpoint"
}

# @cmd profile all Get profile data, connection count, and posts
# @arg username! "LinkedIn profile username (e.g., adamselipsky)"
profile::all() {
  local endpoint="/profile-data-connection-count-posts?username=${argc_username}"
  make_request "GET" "$endpoint"
}

# @cmd Interact with LinkedIn posts
posts() {
  :
}

# @cmd posts search Search for posts based on criteria
# @arg keyword! "Keyword to search for in posts"
# @option --sort-by <sort> "Sort results (date_posted, relevance)" @default "date_posted"
# @option --date-posted <period> "Filter by date posted (e.g., 'Past 24 hours', 'Past week', 'Past month')"
# @option --page <num> "Page number for results" @default 1
# @option --content-type <type> "Filter by content type (e.g., ARTICLE, IMAGE, VIDEO)"
# @option --from-member <ids> "Filter by author member IDs (comma-separated URNs like ACoAA...)"
# @option --from-company <ids> "Filter by author company IDs (comma-separated numbers like 1441,1035)"
# @option --mentions-member <ids> "Filter by mentioned member IDs (comma-separated URNs)"
# @option --mentions-org <ids> "Filter by mentioned organization IDs (comma-separated numbers)"
# @option --author-industry <ids> "Filter by author industry IDs (comma-separated numbers like 96,4)"
# @option --author-company <ids> "Filter by author company IDs (comma-separated numbers)"
# @option --author-title <title> "Filter by author title (string)"
posts::search() {
  local endpoint="/search-posts"

  local page_value="${argc_page:-1}"
  local sort_by="${argc_sort_by:-date_posted}"

  # Use --arg for all fields initially, then convert page to number in jq
  json_payload=$(jq -n \
    --arg keyword "$argc_keyword" \
    --arg sortBy "$sort_by" \
    --arg page "$page_value" \
    '{ 
      keyword: $keyword, 
      sortBy: $sortBy, 
      page: ($page | tonumber) 
    }')

  json_payload=$(add_json_field "$json_payload" "datePosted" "$argc_date_posted" "string")
  json_payload=$(add_json_field "$json_payload" "contentType" "$argc_content_type" "string")
  json_payload=$(add_json_field "$json_payload" "fromMember" "$argc_from_member" "string_array")
  json_payload=$(add_json_field "$json_payload" "fromCompany" "$argc_from_company" "number_array")
  json_payload=$(add_json_field "$json_payload" "mentionsMember" "$argc_mentions_member" "string_array")
  json_payload=$(add_json_field "$json_payload" "mentionsOrganization" "$argc_mentions_org" "number_array")
  json_payload=$(add_json_field "$json_payload" "authorIndustry" "$argc_author_industry" "number_array")
  json_payload=$(add_json_field "$json_payload" "authorCompany" "$argc_author_company" "number_array")
  json_payload=$(add_json_field "$json_payload" "authorTitle" "$argc_author_title" "string")

  make_request "POST" "$endpoint" "$json_payload"
}

# @cmd posts get-with-comments Get a specific post with its comments
# @arg urn! "Post URN (e.g., 7181285160586211328)"
posts::get_with_comments() {
  local endpoint="/get-profile-post-and-comments?urn=${argc_urn}"
  make_request "GET" "$endpoint"
}

# @cmd Interact with LinkedIn people
people() {
  # When no subcommand is provided, show available subcommands
  if [[ -z "${argc_subcommand:-}" ]]; then
    echo "Available people subcommands:"
    echo "  search    - Search for people based on criteria"
    exit 0
  fi
}

# @cmd people search Search for people based on criteria
# @arg keywords! "Keywords to search for (e.g., 'software engineer')"
# @option --start <num> "Starting position for results" @default 0
# @option --geo <ids> "Filter by location Geo IDs (comma-separated numbers like 103644278,101165590)"
# @option --page <num> "Page number for results" @default 1
people::search() {
  local endpoint="/search-people"

  local start_value="${argc_start:-0}"
  local page_value="${argc_page:-1}"

  local query_params="?keywords=${argc_keywords}&start=${start_value}"

  query_params="${query_params}&page=${page_value}"

  if [[ -n "$argc_geo" ]]; then
    query_params="${query_params}&geo=${argc_geo}"
  fi

  make_request "GET" "${endpoint}${query_params}"
}

# @cmd Interact with LinkedIn companies
company() {
  :
}

# @cmd company get Get details for a specific company
# @arg username! "Company username/handle (e.g., google)"
company::get() {
  local endpoint="/get-company-details?username=${argc_username}"
  make_request "GET" "$endpoint"
}

# @cmd company search Search for companies based on criteria
# @option --keyword <keyword> "Keyword to search for in company name/description" @default ""
# @option --locations <ids> "Filter by location Geo IDs (comma-separated numbers like 103644278)"
# @option --sizes <codes> "Filter by company size codes (comma-separated, e.g., D,E,F,G)"
# @flag   --has-jobs "Only include companies with job postings"
# @option --industries <ids> "Filter by industry IDs (comma-separated numbers like 96,4)"
# @option --page <num> "Page number for results" @default 1
company::search() {
  local endpoint="/companies/search"

  local keyword_value="${argc_keyword:-}"
  local page_value="${argc_page:-1}"

  local json_payload=$(jq -n \
    --arg keyword "$keyword_value" \
    --arg page "$page_value" \
    '{
      "keyword": $keyword,
      "page": ($page | tonumber)
    }')

  if [[ -n "$argc_locations" ]]; then
    local locations_array=$(echo "$argc_locations" | jq -Rc 'split(",") | map(tonumber)')
    json_payload=$(echo "$json_payload" | jq --argjson locs "$locations_array" '.locations = $locs')
  fi

  if [[ -n "$argc_sizes" ]]; then
    local sizes_array=$(echo "$argc_sizes" | jq -Rc 'split(",")')
    json_payload=$(echo "$json_payload" | jq --argjson sizes "$sizes_array" '.companySizes = $sizes')
  fi

  if [[ -n "$argc_industries" ]]; then
    local industries_array=$(echo "$argc_industries" | jq -Rc 'split(",") | map(tonumber)')
    json_payload=$(echo "$json_payload" | jq --argjson inds "$industries_array" '.industries = $inds')
  fi

  if [[ "$argc_has_jobs" == "true" ]]; then
    json_payload=$(echo "$json_payload" | jq '.hasJobs = true')
  fi


  make_request "POST" "$endpoint" "$json_payload"
}

# @cmd company domain Find a company by its domain name
# @arg domain! "Company domain (e.g., apple.com)"
company::domain() {
  local endpoint="/get-company-by-domain?domain=${argc_domain}"
  make_request "GET" "$endpoint"
}

# @cmd company insights Get premium company insights (requires appropriate API plan)
# @arg username! "Company username/handle (e.g., amazon)"
company::insights() {
  local endpoint="/get-company-insights?username=${argc_username}"
  make_request "GET" "$endpoint"
}

# --- Helper Functions ---

die() {
  echo "Error:" "$@" >&2
  exit 1
}

add_json_field() {
  local current_json="$1" key="$2" value="$3" type="${4:-string}"

  if [[ -n "$value" ]]; then
    local jq_filter
    local jq_args=()

    jq_args+=(--arg k "$key")

    case "$type" in
    string)
      jq_args+=(--arg v "$value")
      jq_filter='. + {($k): $v}'
      ;;
    number)
      jq_args+=(--argjson v "$value") # Use argjson for numbers
      jq_filter='. + {($k): $v}'
      ;;
    string_array)
      local array_json=$(echo "$value" | jq -Rc 'split(",") | map(select(. != ""))') # Ensure empty strings aren't included
      if [[ "$(echo "$array_json" | jq 'length')" -gt 0 ]]; then
        jq_args+=(--argjson v "$array_json")
        jq_filter='. + {($k): $v}'
      else
        echo "$current_json"
        return
      fi
      ;;
    number_array)
      local array_json=$(echo "$value" | jq -Rc 'split(",") | map(select(. != "") | tonumber? // .)')
      if [[ "$(echo "$array_json" | jq 'length')" -gt 0 ]]; then
        jq_args+=(--argjson v "$array_json")
        jq_filter='. + {($k): $v}'
      else
        echo "$current_json"
        return
      fi
      ;;
    boolean)
      jq_args+=(--argjson v "$value")
      jq_filter='. + {($k): $v}'
      ;;
    *)
      echo "$current_json"
      return
      ;;
    esac
    echo "$current_json" | jq "${jq_args[@]}" "$jq_filter"
  else
    echo "$current_json"
  fi
}

make_request() {
  local method="$1"
  local endpoint_path="$2"
  local json_data="${3:-}"
  local host="linkedin-api8.p.rapidapi.com"
  local response
  local status_code
  local curl_exit_code
  
  local base_url="https://${host}"
  local full_url="${base_url}${endpoint_path}"


  local curl_opts=(-s) # Silent but show errors
  local headers=()
  headers+=(-H "x-rapidapi-host: ${host}")
  headers+=(-H "x-rapidapi-key: ${API_KEY:-$RAPIDAPI_KEY}")

  if [[ "$method" == "POST" ]]; then
    curl_opts+=(-X POST)
    headers+=(-H "Content-Type: application/json")
    [[ -n "$json_data" ]] && curl_opts+=(--data-raw "$json_data")
  elif [[ "$method" == "GET" ]]; then
    curl_opts+=(-X GET)
  else
    die "Unsupported HTTP method: $method"
  fi

  # Use a temp file to capture response
  local tmp_file=$(mktemp)
  status_code=$(curl -o "$tmp_file" -w "%{http_code}" "${curl_opts[@]}" "${headers[@]}" "$full_url" 2>&1)
  curl_exit_code=$?
  response=$(<"$tmp_file")
  rm "$tmp_file"

  if [[ $curl_exit_code -ne 0 || "$status_code" -lt 200 || "$status_code" -ge 300 ]]; then
    echo "Error: API request failed with status code $status_code" >&2
    if [[ -n "$response" ]]; then
      if echo "$response" | jq '.' >/dev/null 2>&1; then
        echo "$response" | jq '.' >&2
      else
        echo "$response" >&2
      fi
    fi
    exit 1
  fi

  if [[ "$argc_json" == "true" ]]; then
    echo "$response"
  else
    if echo "$response" | jq '.' >/dev/null 2>&1; then
      echo "$response" | jq '.'
    else
      echo "$response"
    fi
  fi
}

eval "$(argc --argc-eval "$0" "$@")"

if ! command -v curl &>/dev/null; then die "curl is not installed. Please install it."; fi
if ! command -v jq &>/dev/null; then die "jq is not installed. Please install it."; fi

API_KEY="${argc_key:-${RAPIDAPI_KEY:-}}"
if [[ -z "${API_KEY// /}" ]]; then
  die API key is required. Use -k/--key option or set RAPIDAPI_KEY environment variable.
fi


exit 0 
